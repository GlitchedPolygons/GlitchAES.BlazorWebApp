@page "/keygen"
@using System.Security.Cryptography
@using GlitchedPolygons.ExtensionMethods
@using GlitchedPolygons.GlitchAES.BlazorWebApp.ExtensionMethods
@inject IJSRuntime JSRuntime

<PageTitle>
    GlitchAES - Keygen
</PageTitle>

<h1>
    AES-256 Keygen
</h1>

<br />

<p>
    Once generated, the key will be displayed to you here <strong>ONLY ONCE!</strong>
    If you navigate away from this page or close this tab, the key will be gone!
</p>

<p>
    Clicking on the key generation button more than once will overwrite the previous key <strong>without a warning</strong>.
</p>

<p>
    Therefore: <strong>make sure to save your key somewhere safe and secret!</strong>
</p>

<p>
    <strong>The AES-256 key is a hex-encoded string.</strong>
</p>

@if (DEBUG)
{
    <p role="status">
        Generated seed: <code style="word-wrap: anywhere">@seed</code>
    </p>

    <p role="status">
        Additional entropy hash: <code style="word-wrap: anywhere">@additionalEntropy</code>
    </p>
}

<p role="status">
    Generated AES-256 key hex string:
    @if (keyHexString.NotNullNotEmpty())
    {
        <code>
            <i>(censored)</i>
        </code>
    }
</p>

<br />

<div class="form-group">

    <label class="col-form-label"
           for="publicKey">
        Additional entropy <code>@(additionalEntropyCRC32.HasValue ? $"(CRC-32: {additionalEntropyCRC32.Value})" : "")</code>
    </label>

    <input type="text"
           id="publicKey"
           class="form-control"
           onClick="this.select();"
           style="max-width: 1024px"
           placeholder="Go ahead, go nuts! Smash your keyboard, hack in some random shit here :D"
           @oninput="OnAddAdditionalEntropy">
</div>

<br />

<label>
    Draw something nice down below. Unleash your creativity or something ;D
</label>

<br />

<canvas class="js-paint paint-canvas"
        style="border: 1px #d2d2d2 solid; border-radius: 4px;"
        width="1024"
        height="512">
</canvas>

<input type="hidden"
       tabindex="-2"
       id="paintCanvasEntropy"
       @oninput="OnAddAdditionalEntropy" />

<div style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 1.5rem; margin-bottom: 64px;">
    <button class="btn btn-primary stretch-when-narrow"
            id="keygenButton"
            style="padding-left: 24px; padding-right: 24px;"
            @onclick="GenerateNewKeypair">
        Generate AES key
    </button>

    <button class="btn btn-primary stretch-when-narrow"
            id="copyKeyButton"
            disabled="@keyHexString.NullOrEmpty()"
            style="padding-left: 24px; padding-right: 24px; min-width: 162px;"
            @onclick="CopyKey">
        Copy AES key
    </button>
</div>

<br />
<br />

@code {

    private readonly bool aesGcmSupported = AesGcm.IsSupported;

#if DEBUG
    private const bool DEBUG = true;
#else
        private const bool DEBUG = false;
#endif

    private string seed = string.Empty;
    private string additionalEntropy = string.Empty;
    private string keyHexString = string.Empty;

    private uint? additionalEntropyCRC32 = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(64);

            await JSRuntime.InvokeVoidAsync("InitCopyButtonLabel", "copyKeyButton");
            await JSRuntime.InvokeVoidAsync("InitKeygen");
        }
    }

    private void OnAddAdditionalEntropy(ChangeEventArgs eventArgs)
    {
        additionalEntropy = (additionalEntropy + eventArgs.Value).SHA512();

        if (additionalEntropy.NullOrEmpty())
        {
            additionalEntropyCRC32 = null;
        }
        else
        {
            additionalEntropyCRC32 = additionalEntropy.CRC32();
        }
    }

    private void GenerateNewKeypair()
    {
        Span<byte> generatedKey = stackalloc byte[32];
        Span<byte> entropyBytes = stackalloc byte[128];
        Span<byte> additionalEntropyBytes = stackalloc byte[64];
        
        Random.Shared.NextBytes(entropyBytes);

        if (additionalEntropy.NullOrEmpty())
        {
            Random.Shared.NextBytes(additionalEntropyBytes);
        }
        else
        {
            SHA512.HashData(additionalEntropy.UTF8GetBytes(), additionalEntropyBytes);
        }

        SHA512.HashData(additionalEntropyBytes, entropyBytes[64..]);
        SHA256.HashData(entropyBytes, generatedKey);

#if DEBUG
        seed = Convert.ToHexString(generatedKey);
#endif
        keyHexString = Convert.ToHexString(generatedKey);

        additionalEntropy = string.Empty;
        additionalEntropyCRC32 = null;

        CryptographicOperations.ZeroMemory(generatedKey);
        CryptographicOperations.ZeroMemory(additionalEntropyBytes);
    }

    private async Task CopyKey()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", keyHexString);
        await JSRuntime.InvokeVoidAsync("alert", "Copied AES key to clipboard. Keep this safe and secret; ONLY SHARE WITH PEOPLE YOU TRUST!");
    }

}