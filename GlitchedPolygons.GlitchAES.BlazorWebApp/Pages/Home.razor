@page "/"

@inject IJSRuntime JSRuntime

@using System.Security.Cryptography
@using System.Text
@using GlitchedPolygons.ExtensionMethods
@using Org.BouncyCastle.Crypto.Engines
@using Org.BouncyCastle.Crypto.Modes
@using Org.BouncyCastle.Crypto.Parameters

<PageTitle>
    GlitchAES
</PageTitle>

<h1 title="With 128-bit, 192-bit or 256-bit AES (GCM)">
    Encrypt / Decrypt
</h1>

<br />

<div style="max-width: 888px;">

<div class="accordion"
     id="accordion">
    <div class="accordion-item">
        <h2 class="accordion-header"
            id="headingOne">
            <button class="accordion-button collapsed"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#collapseOne"
                    aria-expanded="false"
                    aria-controls="collapseOne">
                Cipher information
            </button>
        </h2>
        <div id="collapseOne"
             class="accordion-collapse collapse"
             aria-labelledby="headingOne"
             data-bs-parent="#accordion">
            <div class="accordion-body">
                <ul>
                    <li class="mt-3">
                        Encryption technique:
                        <ul>
                            <li>
                                <a href="https://en.wikipedia.org/wiki/Symmetric-key_algorithm"
                                   target="_blank">
                                    Symmetric
                                </a>
                            </li>
                        </ul>
                    </li>

                    <li class="mt-3">
                        Underlying block cipher:
                        <ul>
                            <li>
                                <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
                                   target="_blank">
                                    AES
                                </a>
                                <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode"
                                   target="_blank">
                                    (in Galois/Counter Mode)
                                </a>
                            </li>
                        </ul>
                    </li>

                    <li class="mt-3">
                        Used crypto library:
                        <ul>
                            <li>
                                <a href="https://www.nuget.org/packages/BouncyCastle.Cryptography"
                                   target="_blank">
                                    BouncyCastle.Cryptography
                                </a>
                                <ul>
                                    <li>
                                        <a href="https://www.bouncycastle.org/csharp/licence.html"
                                           target="_blank">
                                            Free and open-source (MIT-licensed)
                                        </a>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </li>

                    <li class="mt-3">
                        Built-in .NET AES-GCM cipher supported: @aesGcmSupported
                    </li>

                    <li class="mt-3 mb-0">
                        This site is 100% open-source (full source code available
                        <a href="https://github.com/GlitchedPolygons/GlitchAES.BlazorWebApp"
                           target="_blank">
                            <span>here</span>
                        </a>), static, sends no data, saves no data and works entirely offline.
                        <ul>
                            <li>
                                <a href="https://github.com/GlitchedPolygons/GlitchAES.BlazorWebApp/blob/master/LICENSE"
                                   target="_blank">
                                    GPL-3.0 license
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="form-group">

    <label class="col-form-label mt-4"
           for="privateKey">
        AES key
    </label>

    <input type="password"
           id="privateKey"
           class="form-control"
           onClick="this.select();"
           placeholder="Hex-encoded AES key string (128-bit, 192-bit or 256-bit)"
           @bind="aesKeyHexString">
</div>

<br />

<ul class="nav nav-tabs mt-4"
    role="tablist">

    <li class="nav-item"
        role="presentation">

        <a class="nav-link active"
           data-bs-toggle="tab"
           aria-selected="false"
           href="#encrypt"
           role="tab"
           id="encrypt-tab"
           tabindex="-1">
            Encrypt
        </a>
    </li>

    <li class="nav-item"
        role="presentation">

        <a class="nav-link"
           data-bs-toggle="tab"
           aria-selected="true"
           href="#decrypt"
           role="tab"
           id="decrypt-tab">
            Decrypt
        </a>
    </li>
</ul>

<div id="myTabContent"
     style="margin-bottom: 64px"
     class="tab-content">

    <div class="tab-pane fade active show"
         id="encrypt"
         role="tabpanel">

        <div class="form-group">
            <label for="message"
                   class="form-label mt-4">
                Message
            </label>
            <textarea class="form-control" id="message" rows="4" @bind="encryptionPlaintext"></textarea>
        </div>

        <div class="form-group">
            <label for="ciphertext"
                   class="form-label mt-4">
                Ciphertext
            </label>
            <textarea class="form-control" id="ciphertext" rows="4" onClick="this.select();" @bind="encryptionCiphertext" readonly></textarea>
        </div>

        <div style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 1.5rem">
            <button class="btn btn-primary stretch-when-narrow"
                    disabled="@(encryptionPlaintext.NullOrEmpty() || aesKeyHexString.NullOrEmpty())"
                    style="padding-left: 24px; padding-right: 24px;"
                    @onclick="EncryptString">
                Encrypt
            </button>

            <button class="btn btn-primary stretch-when-narrow"
                    disabled="@(encryptionCiphertext.NullOrEmpty() || encryptionCiphertext.Contains("error", StringComparison.InvariantCultureIgnoreCase))"
                    style="padding-left: 24px; padding-right: 24px; min-width: 162px;"
                    id="copyCiphertextButton"
                    @onclick="CopyEncryptionCiphertextToClipboard">
                Copy ciphertext
            </button>
        </div>
    </div>

    <div class="tab-pane fade"
         id="decrypt"
         role="tabpanel">

        <div class="form-group">
            <label for="decryptionCiphertext"
                   class="form-label mt-4">
                Ciphertext
            </label>
            <textarea class="form-control" id="decryptionCiphertext" rows="4" onClick="this.select();" @bind="decryptionCiphertext"></textarea>
        </div>

        <div class="form-group">
            <label for="decryptedMessage"
                   class="form-label mt-4">
                Message
            </label>
            <textarea class="form-control" id="decryptedMessage" rows="4" @bind="decryptionPlaintext"></textarea>
        </div>

        <div style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 1.5rem">
            <button class="btn btn-primary stretch-when-narrow"
                    disabled="@(decryptionCiphertext.NullOrEmpty() || aesKeyHexString.NullOrEmpty())"
                    style="padding-left: 24px; padding-right: 24px;"
                    @onclick="DecryptString">
                Decrypt
            </button>

            <button class="btn btn-primary stretch-when-narrow"
                    style="padding-left: 24px; padding-right: 24px;"
                    @onclick="PasteDecryptionCiphertextFromClipboard">
                Paste ciphertext
            </button>
        </div>
    </div>
</div>

<br />
<br />

</div>

@code
{
    private readonly bool aesGcmSupported = AesGcm.IsSupported;
    private readonly byte[] nonceBytes = new byte[Constants.AesGcm.NONCE_SIZE_BYTES];

    private string encryptionPlaintext = string.Empty;
    private string encryptionCiphertext = string.Empty;

    private string decryptionPlaintext = string.Empty;
    private string decryptionCiphertext = string.Empty;

    private string aesKeyHexString = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("InitCopyButtonLabel", "copyCiphertextButton");
        }
    }

    private void EncryptString()
    {
        if (encryptionPlaintext.NullOrEmpty())
        {
            return;
        }
        
        if (aesKeyHexString.Length % 2 != 0 || (aesKeyHexString.Length != 32 && aesKeyHexString.Length != 48 && aesKeyHexString.Length != 64))
        {
            encryptionCiphertext = "ERROR: Invalid key parameter. Please make sure to only use valid 128-bit, 192-bit or 256-bit AES keys (formatted as hex-encoded strings).";
            return;
        }

        try
        {
            Random.Shared.NextBytes(nonceBytes);

            AesEngine aesEngine = new();
            GcmBlockCipher aesGcm = new(aesEngine);
            AeadParameters parameters = new(new KeyParameter(Convert.FromHexString(aesKeyHexString)), 8 * Constants.AesGcm.MAC_SIZE_BYTES, nonceBytes, null);

            aesGcm.Init(true, parameters);

            Span<byte> plaintextBytes = encryptionPlaintext.UTF8GetBytes();
            Span<byte> ciphertextBytes = new byte[aesGcm.GetOutputSize(plaintextBytes.Length)];

            int n = aesGcm.ProcessBytes(plaintextBytes, ciphertextBytes);

            aesGcm.DoFinal(ciphertextBytes[n..]);

            Span<byte> resultBytes = new byte[Constants.AesGcm.NONCE_SIZE_BYTES + ciphertextBytes.Length];

            int offset = 0;

            nonceBytes.CopyTo(resultBytes[offset..]);
            offset += Constants.AesGcm.NONCE_SIZE_BYTES;

            ciphertextBytes.CopyTo(resultBytes[offset..]);

            encryptionCiphertext = Convert.ToHexString(resultBytes);

            Random.Shared.NextBytes(nonceBytes);

            CryptographicOperations.ZeroMemory(resultBytes);
            CryptographicOperations.ZeroMemory(ciphertextBytes);
            CryptographicOperations.ZeroMemory(plaintextBytes);
        }
        catch (Exception e)
        {
            encryptionCiphertext = $"Encryption failed. Thrown exception: {e.ToString()}";
        }
    }

    private void DecryptString()
    {
        if (decryptionCiphertext.NullOrEmpty())
        {
            return;
        }

        if (decryptionCiphertext.Length % 2 != 0)
        {
            decryptionPlaintext = "ERROR: Decryption failed. Invalid ciphertext! Hex-encoded strings are always divisible by two in size. Did you maybe not paste in the entire ciphertext? Sometimes it's easy to miss just one character at the start or end of the ciphertext...";
            return;
        }

        if (aesKeyHexString.Length % 2 != 0 || (aesKeyHexString.Length != 32 && aesKeyHexString.Length != 48 && aesKeyHexString.Length != 64))
        {
            decryptionPlaintext = "ERROR: Invalid key parameter. Please make sure to only use valid 128-bit, 192-bit or 256-bit AES keys (formatted as hex-encoded strings).";
            return;
        }

        try
        {
            Span<byte> aesGcmKeyBytes = Convert.FromHexString(aesKeyHexString);

            Span<byte> encryptionCiphertextBytes = Convert.FromHexString(decryptionCiphertext);

            encryptionCiphertextBytes[..Constants.AesGcm.NONCE_SIZE_BYTES]
                .CopyTo(nonceBytes);

            Span<byte> ciphertextBytes = encryptionCiphertextBytes[Constants.AesGcm.NONCE_SIZE_BYTES..];

            AesEngine aesEngine = new();
            GcmBlockCipher cipher = new(aesEngine);
            AeadParameters parameters = new AeadParameters(new KeyParameter(aesGcmKeyBytes), 8 * Constants.AesGcm.MAC_SIZE_BYTES, nonceBytes, null);

            cipher.Init(false, parameters);

            Span<byte> plaintextBytes = new byte[cipher.GetOutputSize(ciphertextBytes.Length)];

            int n = cipher.ProcessBytes(ciphertextBytes, plaintextBytes);

            cipher.DoFinal(plaintextBytes[n..]);

            decryptionPlaintext = Encoding.UTF8.GetString(plaintextBytes);
            
            Random.Shared.NextBytes(nonceBytes);

            CryptographicOperations.ZeroMemory(aesGcmKeyBytes);
            CryptographicOperations.ZeroMemory(encryptionCiphertextBytes);
            CryptographicOperations.ZeroMemory(ciphertextBytes);
            CryptographicOperations.ZeroMemory(plaintextBytes);
        }
        catch (Exception e)
        {
            decryptionPlaintext = $"Decryption failed. Thrown exception: {e.ToString()}";
        }
    }

    private async Task CopyEncryptionCiphertextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", encryptionCiphertext);
    }

    private async Task PasteDecryptionCiphertextFromClipboard()
    {
        decryptionCiphertext = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText"); // TODO: find out why this does not work // EDIT: nvm it's only broken on firefox; idgaf
    }
}